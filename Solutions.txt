questions: 
{

    beginnerSeries2Clock: {
        kyu: 8,
        prompt: "Your task is to write a function which returns the time since midnight in milliseconds.",
        solution: "function past(h, m, s){ 
            return ((h*60+m)*60+s)*1000}"
    },

    basicMathematicalOperations:{
        kyu: 8,
        prompt: "Your task is to create a function that does four basic mathematical operations.The function should take three arguments - operation(string/char), value1(number), value2(number). The function should return result of numbers after applying the chosen operation.",
        solution: "function basicOp(operation, value1, value2){
            if(operation=='+'){
                return (value1 + value2)
                }
            if(operation=='-'){
                return (value1 - value2)
                }
            if(operation=='*'){
                return (value1 * value2)
                }
            if(operation=='/'){
                return (value1 / value2)
                }
            }"     
    },

    grasshopperPersonalizedMessage:{
        kyu:8,
        prompt: "Create a function that gives a personalized greeting. This function takes two parameters: name and owner.",
        solution: "function greet (name, owner) {
            if(name===owner){
                return 'Hello boss'
            }
            else return 'Hello guest'
            }"
    },

    removeExclamationMarks:{
        kyu: 8,
        prompt: "Write function RemoveExclamationMarks which removes all exclamation marks from a given string.",
        solution: "function removeExclamationMarks(s) {
            return s.split("").filter((l) => l != "!").join("");
            }"
    },

    simpleMultiplication:{
        kyu:8,
        prompt:"This kata is about multiplying a given number by eight if it is an even number and by nine otherwise."
        solution:"function simpleMultiplication(number) {
                return (number%2==1)?number*9:number*8
            }"
    },

    whoLikesThis:{
        kyu:6,
        prompt: "You probably know the "like" system from Facebook and other pages. People can "like" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item. Implement the function which takes an array containing the names of people that like an item. It must return the display text as shown in the examples:"
        solution: "function likes(names) {
            const l = names.length
            if (l == 1){
                return `${names[0]} likes this`
            }
            if (l == 2) {
                return `${names[0]} and ${names[1]} like this`
            }
            if (l == 3) {
                return `${names[0]}, ${names[1]} and ${names[2]} like this`
            }
            if (l >= 4) {
                return `${names[0]}, ${names[1]} and ${l-2} others like this`
            }
            return 'no one likes this'
            }"
    },

    uniqueInOrder:{
        kyu: 6,
        prompt: "Implement the function unique_in_order which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements."
        solution : "var uniqueInOrder=function(iterable){
            
            let iterate = iterable
            let solution = []
            
            if ((typeof iterate) === (typeof "string")) {
                iterate = iterate.split('')
            }
            
            let current = iterate[0]
            
            while (iterate.length != 0 ) {
                while (iterate[0] == current){
                    iterate.shift()
                } 
                solution.push(current)
                current = iterate[0]
            }
                return solution
            }"
    },

    sumOfParts: {
        kyu: 6,
        prompt: "Add every element in an array of numbers together, save that number in an array, then remove the first element of the original array. Repeat until there are no elements left in the original array.",
        solution: "function partsSums(ls) {
                let sums = []
                let list = ls
                while (list.length > 0) {
                sums.push(list.reduce((partialSum, a) => partialSum + a, 0))
                list.shift()
                }
            sums.push(0)
            return sums
            }"
    },

    sumOfTwoLowestPossibleIntegers: {
        kyu: 7,
        prompt: "Create a function that returns the sum of the two lowest positive numbers given an array of minimum 4 positive integers. No floats or non-positive integers will be passed.",
        solution: "function sumTwoSmallestNumbers(numbers) {  
            let n = numbers.sort(function(a, b) {return a - b})
            return n[0] + n[1]
            }"
    },

    directionsReduction : {
        kyu: 5,
        prompt: "Remove adjacent North and South as well as East and West from an array of directions.",
        solution: "function dirReduc(arr){
  
        let prevDir = ""
        let newDirs = []
        
        arr.forEach((dir) => {
            let check = false
            if ((dir == "NORTH" & prevDir =="SOUTH") || (dir == "SOUTH" & prevDir =="NORTH") || (dir == "EAST" & prevDir =="WEST") || (dir == "WEST" & prevDir =="EAST")) {
            newDirs.pop()
            prevDir = `${newDirs[newDirs.length - 1]}`
            check = true
            }
            if (check == false) {
            newDirs.push(dir)
            prevDir = `${newDirs[newDirs.length - 1]}`
            }
        })
        
        return newDirs
        
        }"
    },

    stopSpinningMyWords: {
        kyu: 6,
        prompt: "Invert every word in a string with 5 or more letters.",
        solution: "function spinWords(string){
            let words = string.split(' ')
            
            words = words.map((word) => {
                return (word.split('').length>4)?(word.split('').reverse().join('')):word
            })  
            words = words.join(' ')
            
            return words

            }"
    },

    bitCounting: {
        kyu: 6, 
        prompt: "Write a function that takes an integer as input, and returns the number of bits that are equal to one in the binary representation of that number.",
        solution: "var countBits = function(n) {
            let total = 0
            let bits = (n >>> 0).toString(2)
            bits = bits.split(``)
            
            bits.forEach((bit) => {
                total = total + Number(bit)
            })
            
            return total
            }"
    }

    findThePartyOutlier: {
        kyu: 6.
        prompt: "You are given an array (which will have a length of at least 3, but could be very large) containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer. Write a method that takes the array as an argument and returns this outlier.",
        solution: "function findOutlier(integers){
            let first = integers[0]%2
            let second = integers[1]%2
            let returnthis
            
            if (first == second) {
                returnthis = integers.filter((int) => {int%2 != first})
            }
            if (first != second) {
                returnthis = ((integers[2]%2) == first)?integers[0]:integers[1]
            }
            
            return returnthis
            }"
    }

    convertBooleanToString: {
        kyu: 8,
        prompt: "Implement a function which convert the given boolean value into its string representation.",
        solution: "function booleanToString(b){
            let stringified = b?'true':'false'
            return stringified
            }"
    },

    tribonacciSequence: {
        kyu: 6,
        prompt: "Return the first 10 digits of a Fibonacci Squence that sums the three most recent numbers in an array.",
        solution: "function tribonacci(signature,n){
            let seq = signature
            
            for(let i=0; i<(n-3); i++) {
                let a = signature[i]
                let b = signature[i+1]
                let c = signature[i+2]
                let total = a + b + c
                seq.push(total)
            }
            
            return seq
            
            }"
    },

    exesAndOhs: {
        kyu: 8,
        prompt: "Check to see if a string has the same amount of 'x's and 'o's. The method must return a boolean and be case insensitive. The string can contain any char.",
        solution: "function XO(str) {
            let exes = 0
            let ohs = 0
            let chars = str.split("")

            chars.forEach(char => {
            if(char.toLowerCase() == 'x') { exes += 1}
            if(char.toLowerCase() == 'o') { ohs += 1}
            })
            
            return exes==ohs?true:false
        
        }"
    },

    oppositeNumber: {
        kyu: 7,
        prompt: "Given an number, find and return its opposite.",
        solution: "function opposite(number) {
            return -number
            }"
    },

    convertStringToArray: {
        kyu: 8,
        prompt: "Write a function which turns a string into an array of words.",
        solution: " function stringToArray(string){
            return string.split(' ')

            }"
    },

    squareSum: {
        kyu: 8,
        prompt: "Complete the square sum function so that it squares each number passed into it and then sums the results together.",
        solution: "function squareSum(numbers){
            let sum = 0
            numbers.forEach(number => sum += (number * number))
            return sum
            }"
    },

    sentenceSmash; {
        kyu: 8,
        prompt: "Write a fuction which takes an array of words and turns them into a sentence. You may ignore puncuation.",
        solution: "function smash (words) {
            return words.toString().replaceAll(',', ' ')
            }
    },

    codeUnderPressure1: {
        kyu: 8,
        prompt: "Code as fast as you can, double an integer and return it.",
        solution: "function doubleInteger(i) {
            return i*2
            }"
        }
    },

    writeNumbersInExpandedForms: {
        kyu 6,
        prompt: "You will be given a number and you will need to return it as a string in Expanded Form.",
        solution: "function expandedForm(num) {
            let split = num.toString().split("").map(char => {return Number(char)})
            let maths = split.map (numb => {
                return numb * Math.pow(10, ((split.length-1)-split.indexOf(numb)))
            })
            
            return maths.join(' + ').replaceAll(' + 0', '')
            
            }"
    },

    buildTower: {
        kyu: 6,
        prompt: "Build a pyramid-shaped tower, as an array/list of strings, given a postitive integer to represent the number of floors. A tower block is represented with * characters.",
        solution: "function towerBuilder(nFloors) {
        let tower = []
        for(let height = 0; height < nFloors; height ++){
            let currentFloor = '**'.repeat(nFloors-height).slice(0, -1)
            currentFloor = ' '.repeat(height).concat(currentFloor.concat(' '.repeat(height)))
            tower.unshift(currentFloor)
        }
            return tower
        }"
    },

    lostWithoutAMap; {
        kyu: 8,
        prompt: "Given an array of integers, return a new array with each value doubled.",
        solution: "function maps(x){
            return x.map(num => num*2)
            }"
    },

    thirdAngleTriangle: {
        kyu: 8,
        prompt: "You will be given two angles of a triangle. Write a function to find and return the third.",
        solution: "function otherAngle(a, b) {
                return 180-a-b;
            }"
    },

    areaOrPerimeter: {
        kyu: 8,
        prompt: "You will be given lengh and width of a four sided shape. It will either be a rectangle or a square. If it's a square return the area, else return the perimeter.",
        solution: "const areaOrPerimeter = function(l , w) {
            let output = l==w?l*w:(2*l+2*w)
            return output
            }"
    },

    returningStrings: (
        ku: 8,
        prompt: "Make a function that returns a greeting statement with the given name.",
        solution: "function greet(name){
            return `Hello, ${name} how are you doing today?`
            }"
    ),

    simplePigLatin: {
        kyu: 5,
        prompt: "Move the first letter of each word to the end of it, then add "ay" to the end of the word. Leave punctuation marks untouched.",
        solution: "function pigIt(str){
        let words = str.split(' ')
        
        let latin = words.map((word) => {
            if (word !='!' && word != '.' && word != ',' && word !='?'){
            let letters = word.split('')
            letters.push(letters[0])
            letters.shift()
            letters.push('ay')
        
            return letters.join('')
            }
            return word
        })
        
        return latin.join(' ')
        }"
    },

    sumStringsAsNumbers: {
        kyu: 4,
        prompt: "Given the string representation of two integers, return the string representing the sum of those integers.",
        solution: "function sumStrings(a,b) { 
            let sum = (+a + +b)

            return `${sum}`
            }"
    },

    buildAPileOfCubes: {
        kyu: 6,
        prompt: "Your task is to construct a building which will be a pile of n cubes. The cube at the bottom will have a volume of n^3, the cubes will have a volume of (n-1)^3 and so on until the top which will have a volume of 1^3. You are given a total volume 'm' of the building. Being given 'm' you can find the number 'n' of cubes you will need to build said building."

        solution: "function findNb(m) {
            let n = m
            let counter = 0
            
            for (counter; n > 0; counter++) {
                n -= (counter*counter*counter)
            }
            
            return (n==0)?(counter-1):(-1)
            }"
    },

    shortestWord: {
        kyu: 7,
        prompt: "Given a string of words find and return the length of the shortest word.",
        solution: "function findShort(s){
            let shortest = 'asdfghjkjhgtfrdeswdfgh'
            
            s.split(' ').forEach(word => {
                if(word.length < shortest.length){
                shortest = word 
                }
            })
            
            return shortest.length
            }"
    },

    needleInHaystack: {
        kyu: 8,
        prompt: "Given an array of elements find the index of the needle and return it in the specified string.",
        solution: "function findNeedle(haystack) {
            return `found the needle at position ${haystack.indexOf('needle')}`
            }"
    }

    transportationOnVacatin: {
        kyu: 8,
        prompt: "Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. Alternatively, if you rent the car for 3 or more days, you get $20 off your total. Write a code that gives out the total amount for different days(d).",
        solution: "function rentalCarCost(d) {
            let discount = (d>6)?50:(d>2?20:0)
            return d*40-discount
            }"
    },

    beginnerSeries1Paperwork: {
        kyu: 8,
        prompt: "Your classmates asked you to copy some paperwork for them. You know that there are 'n' classmates and the paperwork has 'm' pages. If either 'n' or 'm' are less than 0 return 0.",
        solution: "function paperwork(n, m) {
            let papers = (n>0 && m>0)?n*m:0
            return papers
            }"
    }

    bouncingBalls: {
        kyu: 6,
        prompt: "A child is playing with a ball on the nth floor of a tall building. The height of this floor above ground level, h, is known. How many times will the mother see the ball pass in front of her window (including when it's falling and bouncing)? The ball can only be seen if the height of the rebounding ball is strictly greater than the window parameter.",
        solution: 'function bouncingBall(h,  bounce,  window) {
            let counter = -1
            let ballh = h
            if(h>0 && bounce>0 && bounce<1 && window<h){
                while(ballh > window) {
                counter += 2
                ballh = ballh*bounce
                }
                return counter
            } else return -1
            }'
    }

    fakeBinary: {
        kyu: 8,
        prompt: "Given a string of digits, you should replace any digit below 5 with '0' and any digit 5 and above with '1'. Return the resulting string.",
        solution: "function fakeBin(x){
            let nums = x.split('')
            let fake = nums.map(num => +num>4?'1':'0')
            return fake.join('')
            }"
    },

    calculateBMI:{
        kyu: 8,
        prompt: "Write function bmi that calculates body mass index (bmi = weight / height2) and return a string dependent on that value.",
        solution: 'function bmi(weight, height) {
            let bmi = weight/(height*height)
            return bmi>30?"Obese":bmi>25?"Overweight":bmi>18.5?"Normal":"Underweight"
            }'
    },

    areYouPlayingBanjo: {
        kyu:8,
        prompt: 'Create a function which answers the question "Are you playing banjo?". If your name starts with the letter "R" or lower case "r", you are playing banjo!',
        solution: 'function areYouPlayingBanjo(name) {
            return name.split("")[0].toUpperCase()=='R'?`${name} plays banjo`:`${name} does not play banjo`
            }'
    },

    detectPangram: {
        kyu: 6,
        prompt: "A pangram is a sentence which uses every letter of the alphabet. Given a string, detect whether or not it is a pangram. Return True if it is, False if not. Ignore numbers and punctuation.",
        solution: "function isPangram(string){
            let alpha = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
            let pan = alpha.map((letter) => string.includes(letter) )
            return !pan.includes(false)
            }"
    },

    youOnlyNeedOne: {
        kyu:8,
        prompt: 'You will be given an array a and a value x. All you need to do is check whether the provided array contains the value. Array can contain numbers or strings. X can be either. Return true if the array contains the value, false if not.',
        solution: 'function check(a, x) {
            let found = a.find(thing => thing === x)
            return found==x?true:false
            }'
    },

    willYouMakeIt: {
        kyu: 8
        prompt: "You were camping with your friends far away from home, but when it's time to go back, you realize that your fuel is running out and the nearest pump is 50 miles away! You know that on average, your car runs on about 25 miles per gallon. There are 2 gallons left. Considering these factors, write a function that tells you if it is possible to get to the pump or not. Function should return true if it is possible and false if not.",
        solution: 'const zeroFuel = (distanceToPump, mpg, fuelLeft) => {
            return mpg*fuelLeft>=distanceToPump
            }'
    },

    createPhoneNumber: {
        kyu: 6,
        prompt: "You will recieve and array of 10 numbers, format them to be a phone number, like (123) 456-789.",
        solution: "function createPhoneNumber(numbers){

        let area = [] //wouldnt let me use = numbers [0, 1, 2]
        area.push(numbers[0])
        area.push(numbers[1])
        area.push(numbers[2])
        let part2 = []
        part2.push(numbers[3])
        part2.push(numbers[4])
        part2.push(numbers[5])
        let part3 = []
        part3.push(numbers[6])
        part3.push(numbers[7])
        part3.push(numbers[8])
        part3.push(numbers[9])
        
        let phoneNumber = `(${area.join("")}) ${part2.join("")}-${part3.join("")}`

        
        return phoneNumber
        }"
    },

    cockroach: {
        kyu: 8,
        prompt: "The cockroach is one of the fastest insects. Write a function which takes its speed in km per hour and returns it in cm per second, rounded down to the integer (= floored).",
        solution: 'function cockroachSpeed(s) {
            return Math.floor(s*100000/60/60)
            }'
    }

    convertBooleanToString: {
        kyu: 8,
        prompt: 'Complete the method that takes a boolean value and return a "Yes" string for true, or a "No" string for false.',
        solution: 'function boolToWord( bool ){
            return bool?"Yes":"No"
            }'
    },

    invertValues: {
        kyu: 9,
        prompt: "Given an array of integers return their opposite values.",
        solution: 'function invert(array) {
        let flip = array.map(num => -num)
        return flip
        }'
    },

    beeramid: {
        kyu: 5,
        prompt: "Let's pretend your company just hired your friend from college and paid you a referral bonus. Awesome! To celebrate, you're taking your team out to the terrible dive bar next door and using the referral bonus to buy, and build, the largest three-dimensional beer can pyramid you can. And then probably drink those beers, because let's pretend it's Friday too. A beer can pyramid will square the number of cans in each level - 1 can in the top level, 4 in the second, 9 in the next, 16, 25...",
        solution: 'var beeramid = function(bonus, price) {
            let count = 0
            let funds = bonus
            while (funds > 0) {
                count = count + 1
                funds = funds - (count*count*price)
            }
                return count
            }'
    },

    returnNegative: {
        kyu: 8,
        prompt: "In this simple assignment you are given a number and have to make it negative. But maybe the number is already negative?",
        solution: "function makeNegative(num) {
            if (num < 0) { return num }
            return -num
            }"
    },

    volumeOfCuboid: {
        kyu: 8,
        prompt: Bob needs a fast way to calculate the volume of a cuboid with three values: the length, width and height of the cuboid. Write a function to help Bob with this calculation.".
        solution: "class Kata {
            static getVolumeOfCuboid(length, width, height) {
                return length*width*height
            }
            }"
    },

    totalAmountOfPoints: {
        kyu: 8,
        prompt: "Our team's match results are recorded in a collection of strings. Each match is represented by a string in the format "x:y", where x is our team's score and y is our opponents score. We get 3 points for a win, 1 point for a tie and 0 points for a loss.",
        solution: 'function points(games) {
            let points = 0
            games.forEach(game => {
                if(game.split("")[0] > game.split("")[2]){points += 3}
                if(game.split("")[0] == game.split("")[2]){points += 1}
            })
            return points
            }'
    },

    howGoodAreYouReally:{
        kyu: 8,
        prompt: "Given an array of class scores and your own score determine if your score is better than the average of the class.",
        solution: 'function betterThanAverage(classPoints, yourPoints) {
            let classSize = classPoints.size
            let classTotal = classPoints.reduce((a, b) => a + b, 0)
            return (yourPoints > (classTotal/classSize))
            }'
    },

    isHeGonnaSurvive: {
        kyu: 8,
        prompt: 'A hero is on his way to the castle to complete his mission. However, he's been told that the castle is surrounded with a couple of powerful dragons! each dragon takes 2 bullets to be defeated, our hero has no idea how many bullets he should carry.. Assuming he's gonna grab a specific given number of bullets and move forward to fight another specific given number of dragons, will he survive? Return true if yes, false otherwise.'
        solution: 'function hero(bullets, dragons){
            return bullets/dragons >= 2
            }'
    },

    testing123: {
        kyu: 7,
        prompt: 'Your team is writing a fancy new text editor and you've been tasked with implementing the line numbering. Write a function which takes a list of strings and returns each line prepended by the correct number. The numbering starts at 1. The format is n: string. Notice the colon and space in between.',
        solution: 'var number=function(array){
            let list = []
            for(let counter = 0; counter < array.length; counter ++){
                list.push(`${counter+1}: ${array[counter]}`)
            }
            return list
            }'
    },

    addingBigNumbers: {
        kyu:4,
        prompt: "Write a function that returns the sum of two numbers. The input numbers are strings and the function must return a string."
        solution: 'function add(a, b) {
            return (Number(a) + Number(b)).toString(); // Fix me!
            }'
    },

    abbreviateTwoWordName: {
        kyu: 8,
        prompt: "Write a function to convert a name into initials. This kata strictly takes two words with one space in between them. The output should be two capital letters with a dot separating them.",
        solution: 'function abbrevName(name){
            let parts = name.split(" ")
            let abrive = parts.map(part => part.split("")[0].toUpperCase())

            return abrive.join(".")
            }'
    },

    stringRepeat: {
        kyu: 8,
        prompt: "Write a function that accepts an integer n and a string s as parameters, and returns a string of s repeated exactly n times.",
        solution: 'function repeatStr (n, s) {
            let long = []
            for(let c = 0; c < n; c++){
                long.push(s)
            }
            return long.join("")
            }'
    },

    reduceButGrow: {
        kyu: 8,
        prompt: 'Given a non-empty array of integers, return the result of multiplying the values together in order.',
        solution: 'function grow(x){
            let total = 1
            for(let c = 0; c < x.length; c++){
                total *= x[c]
            }
            return total
            }'
    },

    mumbling: {
        kyu: 7,
        prompt: "This time no story, no theory. The examples below show you how to write function accum:........The parameter of accum is a string which includes only letters.",
        solution: 'function accum(s) {
                let end = []
            for(let c = 0; c < s.length; c++){
                let cap = s[c].toUpperCase()
                let repeats = s[c].toLowerCase().repeat(c)
                end.push(cap.concat(repeats))
            }
            
            return end.join("-")
            }'
    }

    evenOrOdd: {
        kyu: 8,
        prompt: "Create a function that takes an integer as an argument and returns "Even" for even numbers or "Odd" for odd numbers.",
        solution: 'function evenOrOdd(number) {
            return (`${number/2}`.includes(`.`))?"Odd":"Even"
            }'
    },

    findTheNextPerfectSquare: {
        kyu: 7,
        prompt: 'Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter. Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer. If the argument is itself not a perfect square then return either -1 or an empty value like None or null, depending on your language. You may assume the argument is non-negative.",
        solution: 'function findNextSquare(sq) {
            return `${Math.sqrt(sq)}`.includes('.')?-1:((Math.sqrt(sq) + 1)*(Math.sqrt(sq) + 1))
            }'
    },

    makeUpperCase: {
        kyu: 8,
        prompt: 'Write a function which converts the input string to uppercase.',
        solution: 'function makeUpperCase(str) {
            return str.toUpperCase()
            }'
    },

    humanReadableTime: {
        kyu: 5,
        prompt: 'Write a function, which takes a non-negative integer (seconds) as input and returns the time in a human-readable format (HH:MM:SS)'
        solution: 'function humanReadable (seconds) {
            let seco = seconds
            let sec = seco %= 60
            let minutes = Math.floor(seconds/60)
            let hours = Math.floor(seconds/3600)
            
            minutes = minutes - (hours*60)
            
            return `${hours>9?hours:`0${hours}`}:${minutes>9?minutes:`0${minutes}`}:${sec>9?sec:`0${sec}`}`;
            }'
    },

    arrayDiff: {
        kyu: 6,
        prompt: "Your goal in this kata is to implement a difference function, which subtracts one list from another and returns the result. It should remove all values from list 'a' that are present in list 'b' whilst maintaining their order.
        solution: "function arrayDiff(a, b) {
            const filtered = a.filter((keyword) => !b.includes(keyword))
            return filtered
            }"
    },

    function1HelloWorld: {
        kyu: 8,
        prompt: 'Make a simple function called greet that returns the most-famous "hello world!".',
        solution: 'function greet() {
            return 'hello world!'
            }'
    },

    removeTheMinimum: {
        kyu: 7,
        prompt: 'Given an array of integers, remove the smallest value. Do not mutate the original array/list. If there are multiple elements with the same value, remove the one with the lowest index. If you get an empty array/list, return an empty array/list. Don't change the order of the elements that are left.',
        solution: 'function removeSmallest(numbers) {
            let smallest = numbers[0]
            let numbs = numbers
            for(let c = 0; c < numbers.length; c++){
                if(numbers[c] < smallest) {
                smallest = numbers[c]
                }
            }
            let index = numbs.findIndex(o => o === smallest)
            if(index !== -1) {
                numbs.splice(index, 1)
            }
                return numbs
            }'
    },

    logicDrillTrafficLight: {
        kyu: 7,
        prompt: 'You're writing code to control your town's traffic lights. You need a function to handle each change from green, to yellow, to red, and then to green again. Complete the function that takes a string as an argument representing the current state of the light and returns a string representing the state the light should change to.',
        solution: 'function updateLight(current) {
            switch (current) {
                case "green":
                    return "yellow"
                    break
                case "yellow":
                    return "red"
                    break
                case "red":
                    return "green"
                    break
                }
            }'
    },

    centuryFromYear: {
        kyu: 8,
        prompt: 'Given a year, return the century it is in.'
        solution: 'function century(year) {
            return Math.ceil(year/100)
            }'
    },

    categorizeNewMembers: {
        kyu: 7,
        prompt: 'To be a senior, a member must be at least 55 years old and have a handicap greater than 7. In this croquet club, handicaps range from -2 to +26; the better the player the lower the handicap.' 
        solution: "function openOrSenior(data){
            let status = data.map(person => {
                return (person[0] >= 55  && person[1] > 7)?'Senior':'Open'
            })
            return status
            }"
    },

    numberOfPeopleInTheBus: {
        kyu: 7,
        prompt: 'You are provided with a list (or array) of integer pairs. Elements of each pair represent the number of people that get on the bus (the first item) and the number of people that get off the bus (the second item) at a bus stop. Your task is to return the number of people who are still on the bus after the last bus stop (after the last array). Even though it is the last bus stop, the bus might not be empty and some people might still be inside the bus, they are probably sleeping there :D',
        solution: 'var number = function(busStops){
            let total = 0
            busStops.forEach(stop =>{
                total += stop[0]
                total -= stop[1]
            })
            return total
            }'
    },

    keepUpTheHoop: {
        kyu: 8,
        prompt: 'Alex just got a new hula hoop, he loves it but feels discouraged because his little brother is better than him. Write a program where Alex can input (n) how many times the hoop goes round and it will return him an encouraging message :D',
        solution: 'function hoopCount (n) {
            return n>9?"Great, now move on to tricks":"Keep at it until you get it"
            }'
    },

    theFeastOfManyBeasts: {
        kyu: 8,
        prompt: 'Write a function feast that takes the animal's name and dish as arguments and returns true or false to indicate whether the beast is allowed to bring the dish to the feast. Assume that beast and dish are always lowercase strings, and that each has at least two letters. beast and dish may contain hyphens and spaces, but these will not appear at the beginning or end of the string. They will not contain numerals.',
        solution: 'function feast(beast, dish) {
            let animal = beast.split('')
            let food = dish.split('')
            return (animal[0] == food[0] && animal[animal.length-1] == food[food.length-1])?true:false
            }
    },

    oppositesAttract: {
        kyu: 8,
        prompt: "Timmy & Sarah think they are in love, but around where they live, they will only know once they pick a flower each. If one of the flowers has an even number of petals and the other has an odd number of petals it means they are in love. Write a function that will take the number of petals of each flower and return true if they are in love and false if they aren't.",
        solution: 'function lovefunc(flower1, flower2){
            return flower1%2 !== flower2%2
            }'
    },

    summation: {
        kuyu: 8,
        prompt: 'Write a program that finds the summation of every number from 1 to num. The number will always be a positive integer greater than 0. Your function only needs to return the result, what is shown between parentheses in the example below is how you reach that result and it's not part of it, see the sample tests.',
        solution: 'var summation = function (num) {
            let inc = 0
            for(let counter = 0; counter <= num; counter++){
                inc += counter
            }
            return inc
            }'
    },

    mexicanWave: {
        kyu: 6,
        prompt: 'In this simple Kata your task is to create a function that turns a string into a Mexican Wave. You will be passed a string and you must return that string in an array where an uppercase letter is a person standing up. ',
        solution: "function wave(str){
            let wave = []
            
            for(let c = 0; c < str.length; c++ ){
                let letters = str.split('')
                letters[c] = letters[c].toUpperCase()
                if (letters[c] !== ' ') {wave.push(letters.join(''))}
            }
            
            return wave
            }"
    },

    powersOfTwo: {
        kyu: 8,
        prompt: 'Complete the function that takes a non-negative integer n as input, and returns a list of all the powers of 2 with the exponent ranging from 0 to n ( inclusive ).',
        solution: 'function powersOfTwo(n){
            let list = []
            for(let c = 0; c <= n; n++){
                list.push(2**c)
            }
            return list
            }'
    },

    keepHydrated: {
        kyu: 8,
        prompt: 'Because Nathan knows it is important to stay hydrated, he drinks 0.5 litres of water per hour of cycling. You get given the time in hours and you need to return the number of litres Nathan will drink, rounded to the smallest value.',
        solution: 'function litres(time) {
            return Math.floor(time*0.5)
            }'
    },

    isThisATriangle: {
        kyu: 8,
        prompt: 'Implement a function that accepts 3 integer values a, b, c. The function should return true if a triangle can be built with the sides of given length and false in any other case.',
        solution: 'function isTriangle(a,b,c){
            return (a+b>c && b+c>a && a+c>b)?true:false
            }'
    },

    sumMixedArray: {
        kyu: 8,
        prompt: 'Given an array of integers as strings and numbers, return the sum of the array values as if all were numbers.'
        solution: 'function sumMix(x){
            let sum = 0
            for(let c = 0; c < x.length; c++) {
                sum += Number(x[c])
            }
                return sum
            }'
    },

    reversedStrings: {
        kyu: 8,
        prompt: 'Complete the solution so that it reverses the string passed into it.'
        solution: "function solution(str){
            return str.split('').reverse().join('')  
            }"
    },

    parseIntFromCharProblem: {
        kyu: 8,
        prompt: 'You ask a small girl,"How old are you?" She always says, "x years old", where x is a random number between 0 and 9. Write a program that returns the girl's age (0-9) as an integer. Assume the test input string is always a valid string. For example, the test input may be "1 year old" or "5 years old". The first character in the string is always a number.',
        solution: "function getAge(inputString){
            return Number(inputString.split('')[0])
            }"
    },

    moneyMoneyMoney: {
        kyu: 7,
        prompt: 'Mr. Scrooge has a sum of money 'P' that he wants to invest. Before he does, he wants to know how many years 'Y' this sum 'P' has to be kept in the bank in order for it to amount to a desired sum of money 'D'. The sum is kept for 'Y' years in the bank where interest 'I' is paid yearly. After paying taxes 'T' for the year the new sum is re-invested. Note to Tax: not the invested principal is taxed, but only the year's accrued interest',
        solution: 'function calculateYears(principal, interest, tax, desired) {
            let total = principal
            let years = 0
                for (years; total < desired; years++){
                total = (total + total*(interest-interest*tax))
                }
            return years
            }'
    },

    madeDeadfishSwim: {
        kyu: 6,
        prompt: "Write a simple parser that will parse and run Deadfish.
            Deadfish has 4 commands, each 1 character long: 
            i increments the value (initially 0)
            d decrements the value
            s squares the value
            o outputs the value into the return array
            Invalid characters should be ignored.",
        solution: "function parse( data ){
            const output = []
            const commands = data.split("")
            let num = 0
            while (commands.length != 0) {
                switch (commands[0]) {
                    case "i":
                    num += 1
                    commands.shift()
                    break;
                    case "d":
                    num -= 1
                    commands.shift()
                    break;
                    case "s":
                    num = num*num
                    commands.shift()
                    break;
                    case "o":
                    output.push(num)
                    commands.shift()
                    break;
                    default:
                    commands.shift()
                }
            }
            return output
            }"
    },

    isItEven: {
        kyu: 8,
        prompt: 'In this Kata we are passing a number (n) into a function. Your code will determine if the number passed is even (or not). The function needs to return either a true or false. Numbers may be positive or negative, integers or floats. Floats with decimal part non equal to zero are considered UNeven for this kata.',
        solution: 'function testEven(n) {
                return n%2!==0?false:true
            }'
    }

    isItAPalindrome: {
        kyu: 8,
        prompt: 'Write a function that checks if a given string is a palindrome. A palindrome is a word, number, phrase, or other sequence of symbols that reads the same backwards as forwards, such as madam or racecar.'
        solution: 'function isPalindrome(x) {
            let inverse = x.toLowerCase().split("").reverse()
            return inverse.join("")==x.toLowerCase()
            }'
    },

    isTheStringUpperCase: {
        kyu: 8,
        prompt: 'Create a method to see whether the string is ALL CAPS.'
        solution: 'function(str) {
            return str.toUpperCase() === str
            }'
    }

    countByX: {
        kyu: 8,
        prompt: 'Create a function with two arguments that will return an array of the first n multiples of x. Assume both the given number and the number of times to count will be positive numbers greater than 0. Return the results as an array or list ( depending on language ).'
        solution: 'function countBy(x, n) {
            let z = [];
            for(let c = 1; c <= n; c++){
                z.push(c*x)
            }
            return z;
            }'
       },

    descendingOrder: {
        kyu: 7,
        prompt: 'Your task is to make a function that can take any non-negative integer as an argument and return it with its digits in descending order. Essentially, rearrange the digits to create the highest possible number.',
        solution: "function descendingOrder(n){
            let nums = `${n}`.split('')
            nums = nums.map(num => {
                return parseInt(num)
            })
            return parseInt(nums.sort().reverse().join(''))
            }"
    },

    sortNumbers: {
        kyu: 7,
        prompt: "Finish the solution so that it sorts the passed in array of numbers. If the function passes in an empty array or null/nil value then it should return an empty array.",
        solution: 'function solution(nums){
            return nums.sort()
            }'
    },

    grasshopperDebugSayHello: {
        kyu: 8,
        prompt: 'The starship Enterprise has run into some problem when creating a program to greet everyone as they come aboard. It is your job to fix the code and get the program working again!',
        solution: 'function sayHello(name) {
            return `Hello, ${name}`
            }'
    },

    reverseWords: {
        kyu: 8,
        prompt: 'Complete the function that accepts a string parameter, and reverses each word in the string. All spaces in the string should be retained.',
        solution: 'function reverseWords(str) {
            let words = str.split(" ")
            let reversed = words.map(word => word.split("").reverse().join(""))
            
            return reversed.join(" ")
            }'
    },

    friendOrFoe: {
        kyu: 7,
        prompt: "Make a prompt that filters an array of strings and returns only those with 4 letters in them.",
        solution: "function friend(friends){
            let real = []
            friends.forEach((person) => { 
                if(person.length == 4) {
                real.push(person)
                }
            })

            return real

        }"
    },

}