questions: 
{
    beginnerSeries2Clock: {
        kyu: 8,
        prompt: "Your task is to write a function which returns the time since midnight in milliseconds.",
        solution: "function past(h, m, s){ 
            return ((h*60+m)*60+s)*1000}"
    },

    basicMathematicalOperations:{
        kyu: 8,
        prompt: "Your task is to create a function that does four basic mathematical operations.The function should take three arguments - operation(string/char), value1(number), value2(number). The function should return result of numbers after applying the chosen operation.",
        solution: "function basicOp(operation, value1, value2){
            if(operation=='+'){
                return (value1 + value2)
                }
            if(operation=='-'){
                return (value1 - value2)
                }
            if(operation=='*'){
                return (value1 * value2)
                }
            if(operation=='/'){
                return (value1 / value2)
                }
            }"
            
    },

    grasshopperPersonalizedMessage:{
        kyu:8,
        prompt: "Create a function that gives a personalized greeting. This function takes two parameters: name and owner.",
        solution: "function greet (name, owner) {
            if(name===owner){
                return 'Hello boss'
            }
            else return 'Hello guest'
            }"
    },

    removeExclamationMarks:{
        kyu: 8,
        prompt: "Write function RemoveExclamationMarks which removes all exclamation marks from a given string.",
        solution: "function removeExclamationMarks(s) {
            return s.split("").filter((l) => l != "!").join("");
            }"
    },

    simpleMultiplication:{
        kyu:8,
        prompt:"This kata is about multiplying a given number by eight if it is an even number and by nine otherwise."
        solution:"function simpleMultiplication(number) {
                return (number%2==1)?number*9:number*8
            }"
    },

    whoLikesThis:{
        kyu:6,
        prompt: "You probably know the "like" system from Facebook and other pages. People can "like" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item. Implement the function which takes an array containing the names of people that like an item. It must return the display text as shown in the examples:"
        solution: "function likes(names) {
            const l = names.length
            if (l == 1){
                return `${names[0]} likes this`
            }
            if (l == 2) {
                return `${names[0]} and ${names[1]} like this`
            }
            if (l == 3) {
                return `${names[0]}, ${names[1]} and ${names[2]} like this`
            }
            if (l >= 4) {
                return `${names[0]}, ${names[1]} and ${l-2} others like this`
            }
            return 'no one likes this'
            }"
    },

    madeDeadfishSwim: {
        kyu: 6,
        prompt: "Write a simple parser that will parse and run Deadfish.
            Deadfish has 4 commands, each 1 character long: 
            i increments the value (initially 0)
            d decrements the value
            s squares the value
            o outputs the value into the return array
            Invalid characters should be ignored.",
        solution: "function parse( data ){
            const output = []
            const commands = data.split("")
            let num = 0
            while (commands.length != 0) {
                switch (commands[0]) {
                    case "i":
                    num += 1
                    commands.shift()
                    break;
                    case "d":
                    num -= 1
                    commands.shift()
                    break;
                    case "s":
                    num = num*num
                    commands.shift()
                    break;
                    case "o":
                    output.push(num)
                    commands.shift()
                    break;
                    default:
                    commands.shift()
                }
            }
            return output
            }"
    },

    uniqueInOrder:{
        kyu: 6,
        prompt: "
        solution : "var uniqueInOrder=function(iterable){
            
            let iterate = iterable
            let solution = []
            
            if ((typeof iterate) === (typeof "string")) {
                iterate = iterate.split('')
            }
            
            let current = iterate[0]
            
            while (iterate.length != 0 ) {
                while (iterate[0] == current){
                    iterate.shift()
                } 
                solution.push(current)
                current = iterate[0]
            }
                return solution
            }"
    }





}